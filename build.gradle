import java.text.DateFormat
import java.text.SimpleDateFormat

version project.modVersion
group project.modGroup
buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://repo.spongepowered.org/maven/' }
        maven { url = "https://repo.spongepowered.org/repository/maven-public" }
        jcenter()
        maven { url = "https://repo.viaversion.com" }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
        maven {
            name = 'gradle plugins'
            url "https://plugins.gradle.org/m2/"
        }

    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:4.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "com.viaversion:viaversion:4.0.1"
        classpath "com.viaversion:viabackwards:4.0.1"
        classpath "org.yaml:snakeyaml:1.29"
        classpath 'gradle.plugin.com.matthewprenger:CurseGradle:1.0.9'

        //classpath "space.vectrix.flare-fastutil:2.0.0"
    }
}

apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.spongepowered.mixin'
apply plugin: "java"
apply plugin: "maven-publish"
apply plugin: 'com.matthewprenger.cursegradle'
apply plugin: 'application'
apply plugin: 'eclipse'
ext {
    jmonkeyengine_version = '[3.1,)'
}
mainClassName = "me.earth.earthhack.installer.main.Main"


sourceSets.main.java {
    srcDirs += 'src/main/cape-api'
    srcDirs += 'src/main/command'
    srcDirs += 'src/main/commons'
    srcDirs += 'src/main/event'
    srcDirs += 'src/main/java/family_fun_pack'
    srcDirs += 'src/main/java/me'

}
configurations {
    include
    implementation.extendsFrom(include)
}

compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
}

compileKotlin.kotlinOptions {
    freeCompilerArgs += '-Xlambdas=indy'
    freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
    freeCompilerArgs += '-Xopt-in=kotlin.contracts.ExperimentalContracts'
}

repositories {
    maven { url = 'https://repo.spongepowered.org/maven/' }
    maven { url = 'https://impactdevelopment.github.io/maven/' }
    maven { url = "https://jitpack.io" }
    mavenCentral()
    maven { url = "https://repo.viaversion.com" }
    ivy {
        name = 'lunatrius\' ivy repo'
        url 'http://mc.lunatri.us/files'
    }
}
mainClassName = "me.earth.earthhack.installer.main.Main"
group project.modGroup //http://maven.apache.org/guides/mini/guide-naming-conventions.html

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 12
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    // def isRef = head.length > 1     // ref: refs/heads/master

}

// build constants

boolean INCREMENT = false // increments version
// NO APPEND THAT YOURSELF BITCH
boolean UNIQUE = false // adds a random 8-char string to the build number
// instead of incrementing the last number
// this is so that we don't get absurdly large numbers
// maybe only increment the number automatically if CI is ever added to the repo?
boolean HASH = true
boolean DATE = false // adds the date to the random string
boolean CLEAR = true // clears other jars in the build folder to stop it from being clogged up

boolean VANILLA = false

String title = getCheckedOutGitCommitHash()

//noinspection GroovyUnusedAssignment
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    // idk this gets called when u do anything but whatever
    File versionFile = file 'version'
    String contents = versionFile.getText( 'UTF-8' )
    String[] split = contents.split('\\.')
    int lastVersion = Integer.parseInt(split[2].split('-')[0])
    if (INCREMENT)
    {
        lastVersion++
    }

    if (!UNIQUE)
    {
        contents = split[0] + '.' + split[1] + '.' + (lastVersion)
    }
    else
    {
        String extra = ""
        if (DATE)
        {
            Date date = Calendar.getInstance().getTime()
            DateFormat dateFormat = new SimpleDateFormat('mm-dd-yy-hh-mm')
            extra = dateFormat.format(date) + '-'
        }

        String generatedString = UUID.randomUUID().toString().split('-')[0]
        String randomString = lastVersion + '-' + 'build-' + extra + generatedString
        contents = split[0] + '.' + split[1] + '.' + randomString
    }

    if (HASH)
    {
        contents = split[0] + '.' + split[1] + '.' + lastVersion + '-' + title
    }

    versionFile.write( contents, 'UTF-8' )

    version contents

    sourceCompatibility = targetCompatibility = '1.8'
    // Tbh it would be much easier if we could assign this differently
    // instead of writing it, but StackOverflow didn't give a working
    // solution for that. One looked promising but it caused duplicate classes.
    File update = file 'src/main/java/me/earth/earthhack/impl/Earthhack.java'
    contents = update.getText( 'UTF-8' )
    contents = contents.replaceAll( 'VERSION = "(.*?)"', 'VERSION = "' + project.version + '"' )
    update.write( contents, 'UTF-8' )
    update = file 'src/main/resources/mcmod.info'
    contents = update.getText( 'UTF-8' )
    contents = contents.replaceAll( '"version": "(.*?)"', '"version": "' + project.version + '"' )
    update.write( contents, 'UTF-8' )

    if (CLEAR)
    {
        File libs = file buildDir.getAbsolutePath() + '/libs/'
        if (libs.exists() && libs.isDirectory())
        {
            for (File file in libs.listFiles())
            {
                file.delete()
            }
        }
    }
}

minecraft {
    mappings channel: "$mappingsChannel", version: "$mappingsVersion"
    runs {
        client {
            workingDirectory project.file('run')

            property 'fml.coreMods.load', 'com.lambda.client.mixin.MixinLoaderForge'
            property 'mixin.env.disableRefMap', 'true' // Disable refmap so we don't get trolled by Baritone

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

configurations {
    jarLibs
    // Force choosing the correct nightly build because Mac OS chooses an invalid one
    all {
        resolutionStrategy {
            force 'org.lwjgl.lwjgl:lwjgl-platform:2.9.4-nightly-20150209'
        }
    }
}

dependencies {
    implementation "com.viaversion:viabackwards:4.0.2-SNAPSHOT"
    implementation "com.viaversion:viaversion:4.0.2-SNAPSHOT"
    implementation 'space.vectrix.flare:flare-fastutil:1.0.0'
    implementation 'space.vectrix.flare:flare:1.0.0'
    implementation 'fastutil:fastutil:5.0.9'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    implementation 'org.json:json:20210307'
    implementation 'org.joml:joml:1.10.3'
    compile group: 'com.cosium.junixsocket', name: 'junixsocket-common', version: '2.0.4.3'
    compile group: 'org.json', name: 'json', version: '20210307'
    compile "org.jmonkeyengine:jme3-bullet:$jmonkeyengine_version"
    compile group: 'com.formdev', name: 'flatlaf', version: '1.5'
    compile group: 'org.slick2d', name: 'slick2d-core', version: '1.0.2'
    compile group: 'org.joml', name: 'joml', version: '1.10.2'
    compile group: 'us.ihmc', name: 'jassimp', version: '4.0.0-ihmc6'
    compile group: 'us.ihmc', name: 'ihmc-native-library-loader', version: '1.3.1'
    compile group: 'com.github.stephengold', name: 'Libbulletjme', version: '12.5.0'
    compile group: 'de.fabmax', name: 'physx-jni', version: '0.4.15'
    compile group: 'de.fabmax', name: 'physx-jni', version: '0.4.15:native-win64'

    compile group: 'net.java.dev.jna', name: 'jna', version: '5.8.0'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '5.8.0'

    compile group: 'com.badlogicgames.gdx', name: 'gdx', version: '1.10.0'
    compile group: 'com.badlogicgames.gdx', name: 'gdx-bullet', version: '1.10.0'
    compile group: 'com.badlogicgames.gdx', name: 'gdx-backend-lwjgl', version: '1.10.0'
    compile "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-bullet-platform:1.10.0:natives-desktop"
    //deobfCompile group: group, name: 'LunatriusCore', version: "${project.version_minecraft}-${project.version_lunatriuscore}", classifier: 'universal'


    // Forge
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"
    jarLibs('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }

    // Hacky way to get mixin work
    annotationProcessor('org.spongepowered:mixin:0.8.2:processor') {
        exclude module: 'gson'
    }

    jarLibs('org.reflections:reflections:0.9.12') {
        exclude module: 'gson'
        exclude module: 'guava'
    }

    // Kotlin libs
    // kotlin-stdlib-common and annotations aren't required at runtime
    jarLibs("org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    jarLibs("org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    jarLibs("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    jarLibs("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }

    jarLibs("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxCoroutinesVersion") {
        exclude module: 'kotlin-stdlib-common'
        exclude module: 'annotations'
    }


    // Add them back to compileOnly (provided)
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlinVersion"
    compileOnly 'org.jetbrains:annotations:20.1.0'

    // This Baritone will NOT be included in the jar
    implementation 'com.github.cabaletta:baritone:1.2.14'

    // This Baritone WILL be included in the jar
    jarLibs 'cabaletta:baritone-api:1.2'

    // Add everything in jarLibs to implementation (compile)
    implementation configurations.jarLibs
}

mixin {
    defaultObfuscationEnv 'searge'
    add sourceSets.main, 'mixins.lambda.refmap.json'
}
jar {
    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'TweakClass': 'me.earth.earthhack.tweaker.EarthhackTweaker',
                'TweakOrder': -999,
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true',
                'Main-Class': mainClassName
        )
    }
}

processResources {
    inputs.property 'version', project.version

    exclude '**/rawimagefiles'

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        include "com.viaversion:viaversion:4.0.2-SNAPSHOT"
        include "com.viaversion:viabackwards:4.0.2-SNAPSHOT"
        include "org.yaml:snakeyaml:1.29"
        expand 'version': project.version
    }
}

task sourceJar(type: Jar) { // Generate sources
    group 'build'
    description 'Assemble API library source archive'

    archiveClassifier.set('api-source')
    from sourceSets.main.allSource
}

task apiJar(type: Jar) {
    group 'build'
    description 'Assemble API library archive'

    archiveClassifier.set('api')
    from sourceSets.main.output
}

// Don't put baritone mixin here please c:
jar {
    manifest.attributes(
            'Manifest-Version': 1.0,
            'MixinConfigs': 'mixins.lambda.json',
            'TweakClass': 'org.spongepowered.asm.launch.MixinTweaker',
            'TweakOrder': 0,
            'FMLCorePluginContainsFMLMod': 'true',
            'FMLCorePlugin': 'com.lambda.client.mixin.MixinLoaderForge',
            'ForceLoadAsMod': 'true',
            'Main-Class': 'com.lambda.client.installer.Installer'
    )

    // Copy needed libs to jar
    from {
        configurations.jarLibs.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}
import java.text.DateFormat
import java.text.SimpleDateFormat

buildscript {
    repositories {
        //noinspection JCenterRepository
        jcenter()
        maven {
            name = 'forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'SpongePowered'
            url = 'https://repo.spongepowered.org/maven'
        }
        maven {
            name = "jitpack.io"
            url = "https://jitpack.io"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.6-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.4'
        classpath 'com.formdev:flatlaf:1.5'
    }
}

// TODO: double check if there's forge methods we missed with vanilla source
// apply plugin: 'net.minecraftforge.gradle.tweaker-client'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

mainClassName = "me.earth.earthhack.installer.main.Main"
group project.modGroup //http://maven.apache.org/guides/mini/guide-naming-conventions.html


// build constants


//noinspection GroovyUnusedAssignment
sourceCompatibility = targetCompatibility = '1.8'
compileJava {
    // idk this gets called when u do anything but whatever
    File versionFile = file 'version'
    String contents = versionFile.getText( 'UTF-8' )
    String[] split = contents.split('\\.')
    int lastVersion = Integer.parseInt(split[2].split('-')[0])
    if (INCREMENT)
    {
        lastVersion++
    }

    if (!UNIQUE)
    {
        contents = split[0] + '.' + split[1] + '.' + (lastVersion)
    }
    else
    {
        String extra = ""
        if (DATE)
        {
            Date date = Calendar.getInstance().getTime()
            DateFormat dateFormat = new SimpleDateFormat('mm-dd-yy-hh-mm')
            extra = dateFormat.format(date) + '-'
        }

        String generatedString = UUID.randomUUID().toString().split('-')[0]
        String randomString = lastVersion + '-' + 'build-' + extra + generatedString
        contents = split[0] + '.' + split[1] + '.' + randomString
    }

    if (HASH)
    {
        contents = split[0] + '.' + split[1] + '.' + lastVersion + '-' + title
    }

    versionFile.write( contents, 'UTF-8' )

    version contents

    sourceCompatibility = targetCompatibility = '1.8'
    // Tbh it would be much easier if we could assign this differently
    // instead of writing it, but StackOverflow didn't give a working
    // solution for that. One looked promising but it caused duplicate classes.
    File update = file 'src/main/java/me/earth/earthhack/impl/Earthhack.java'
    contents = update.getText( 'UTF-8' )
    contents = contents.replaceAll( 'VERSION = "(.*?)"', 'VERSION = "' + project.version + '"' )
    update.write( contents, 'UTF-8' )
    update = file 'src/main/resources/mcmod.info'
    contents = update.getText( 'UTF-8' )
    contents = contents.replaceAll( '"version": "(.*?)"', '"version": "' + project.version + '"' )
    update.write( contents, 'UTF-8' )

    if (CLEAR)
    {
        File libs = file buildDir.getAbsolutePath() + '/libs/'
        if (libs.exists() && libs.isDirectory())
        {
            for (File file in libs.listFiles())
            {
                file.delete()
            }
        }
    }
}


repositories {
    maven {
        name = 'spongepowered-repo'
        url = 'https://repo.spongepowered.org/maven'
    }

    maven {
        name = "jitpack.io"
        url  = "https://jitpack.io"
    }

    mavenCentral()
    google()

    /*maven {
        url = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }*/
    /*maven {
        url = 'https://oss.sonatype.org/content/repositories/releases/'
    }*/
}

dependencies {
    compile('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'launchwrapper'
        exclude module: 'guava'
        exclude module: 'gson'
        exclude module: 'commons-io'
    }
    /*compile('org.languagetool:language-en:5.4') {
        exclude module: 'guava'
    }*/
    // compile group: 'org.languagetool', name: 'language-en', version: '5.4'
    /*compile('org.languagetool:languagetool-core:5.4') {
        exclude module: 'guava'
    }*/
    compile group: 'club.minnced', name: 'java-discord-rpc', version: '2.0.1'
    compile group: 'com.formdev', name: 'flatlaf', version: '1.5'
    // compile group: 'org.l33tlabs.twl', name: 'pngdecoder', version: '1.0'
    compile group: 'org.slick2d', name: 'slick2d-core', version: '1.0.2'
    compile group: 'org.joml', name: 'joml', version: '1.10.2'
    compile group: 'us.ihmc', name: 'jassimp', version: '4.0.0-ihmc6'
    compile group: 'us.ihmc', name: 'ihmc-native-library-loader', version: '1.3.1'
    compile group: 'com.github.stephengold', name: 'Libbulletjme', version: '12.5.0'
    compile group: 'de.fabmax', name: 'physx-jni', version: '0.4.15'
    compile group: 'de.fabmax', name: 'physx-jni', version: '0.4.15:native-win64'

    compile group: 'net.java.dev.jna', name: 'jna', version: '5.8.0'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '5.8.0'

    compile group: 'com.badlogicgames.gdx', name: 'gdx', version: '1.10.0'
    compile group: 'com.badlogicgames.gdx', name: 'gdx-bullet', version: '1.10.0'
    compile group: 'com.badlogicgames.gdx', name: 'gdx-backend-lwjgl', version: '1.10.0'
    compile "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-desktop"
    compile "com.badlogicgames.gdx:gdx-bullet-platform:1.10.0:natives-desktop"

}


task getDeps(type: Copy) {
    from sourceSets.main.runtimeClasspath
    into 'runtime/'
}


shadowJar {
    dependencies {
        //noinspection GroovyAssignabilityCheck
        // include(dependency('org.languagetool:languagetool-core'))
        // include(dependency('org.languagetool:language-en'))
        include(dependency('org.spongepowered:mixin'))
        include(dependency('club.minnced:java-discord-rpc:2.0.1'))
        include(dependency('club.minnced:discord-rpc-release:v3.3.0'))
        include(dependency('com.formdev:flatlaf:1.5'))
        // include(dependency('org.l33tlabs.twl:pngdecoder:1.0'))
        include(dependency('org.slick2d:slick2d-core'))

        // include(dependency('com.github.dabasan:jassimp'))
        // include(dependency(files('libs/assimp4j.jar')))
        include(dependency('org.joml:joml'))
        include(dependency('us.ihmc:jassimp'))
        include(dependency('us.ihmc:ihmc-native-library-loader'))
        include(dependency('org.apache.commons:commons-lang3'))
        /* Below this line is stuff necessary for unfinished stuff on my local branch. */
        include(dependency('com.github.stephengold:Libbulletjme'))
        include(dependency('de.fabmax:physx-jni'))
        include(dependency('com.badlogicgames.gdx:gdx-backend-lwjgl'))
        include(dependency('com.badlogicgames.gdx:gdx'))
        include(dependency('com.badlogicgames.gdx:gdx-bullet'))
        include(dependency('com.badlogicgames.gdx:gdx-platform'))
        include(dependency('com.badlogicgames.gdx:gdx-bullet-platform'))

        include(dependency('net.java.dev.jna:jna'))
        include(dependency('net.java.dev.jna:jna-platform'))

        // include(dependency(files('libs/patched-lwjgl.jar')))
        // include(dependency('org.lwjgl:lwjgl-assimp'))
        // include(dependency('org.lwjgl:lwjgl'))
    }
    exclude 'dummyThing'
    exclude 'LICENSE.txt'
    classifier = 'release'
}

mixin {
    //noinspection GroovyAssignabilityCheck
    add sourceSets.main, 'mixins.earth.refmap.json'
}

reobf {
    shadowJar {
        classpath = sourceSets.main.compileClasspath
    }
}

jar {
    manifest {
        attributes(
                'Manifest-Version': 1.0,
                'TweakClass': 'me.earth.earthhack.tweaker.EarthhackTweaker',
                'TweakOrder': -999,
                'FMLCorePluginContainsFMLMod': 'true',
                'ForceLoadAsMod': 'true',
                'Main-Class': mainClassName
        )
    }
}

build.dependsOn(shadowJar)


task buildApi {
    group 'build'
    dependsOn sourceJar
    dependsOn apiJar
    description 'Assemble API library archives'
}