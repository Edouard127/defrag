package me.han.muffin.client.module.modules.exploits

import me.han.muffin.client.core.Globals
import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.client.UpdateEvent
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.manager.managers.ChatManager
import me.han.muffin.client.module.Module
import me.han.muffin.client.utils.ChatIDs
import me.han.muffin.client.utils.extensions.mixin.netty.*
import me.han.muffin.client.utils.math.MathUtils
import me.han.muffin.client.value.Value
import net.minecraft.entity.Entity
import net.minecraft.network.play.client.CPacketPlayer
import net.minecraft.network.play.client.CPacketVehicleMove
import net.minecraft.network.play.server.SPacketDestroyEntities
import net.minecraft.network.play.server.SPacketDisconnect
import net.minecraft.network.play.server.SPacketSetPassengers
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener
import java.util.*

object EntityDesyncModule: Module("EntityDesync", Category.EXPLOITS, "Desync current riding entity so you can exploit with it.") {
    private val noForceDismount = Value(false, "NoForceDismount")
    private val hClip = Value("HClip", true)

    init {
        addSettings(noForceDismount, hClip)
    }

    private var riding: Entity? = null

    override fun onEnable() {
        riding = null

        if (fullNullCheck()) {
            return
        }

        if (!Globals.mc.player.isRiding) {
            ChatManager.sendMessage("You are not riding an entity.")
            toggle()
            return
        }

        riding = Globals.mc.player.ridingEntity

        Globals.mc.player.dismountRidingEntity()
        Globals.mc.world.removeEntity(riding!!)

        if (hClip.value) {
            val direction = MathUtils.direction(Globals.mc.player.rotationYaw)
            val entity = (if (Globals.mc.player.isRiding) Globals.mc.player.ridingEntity else Globals.mc.player) ?: return
            entity.setPosition(Globals.mc.player.posX + direction.x * 122, Globals.mc.player.posY - 30, Globals.mc.player.posZ + direction.y * 122)
            ChatManager.sendMessage(String.format("Teleported you %s blocks forward", 122))
        }

    }

    override fun onDisable() {
        if (fullNullCheck()) return
        if (riding != null) {
            riding!!.isDead = false
            if (!Globals.mc.player.isRiding) {
                Globals.mc.world.spawnEntity(riding!!)
                Globals.mc.player.startRiding(riding!!, true)
            }
            riding = null
        }
    }

    @Listener
    private fun onPlayerUpdate(event: UpdateEvent) {
        if (event.stage != EventStageable.EventStage.POST) return

        if (riding == null || Globals.mc.player.isRiding) return

        Globals.mc.player.onGround = true

        if (Globals.mc.player.posY <= 3) {
            Globals.mc.player.setPosition(Globals.mc.player.posX, 69.0, Globals.mc.player.posZ)
            Globals.mc.player.posY = 69.0
        }

        riding?.setPosition(Globals.mc.player.posX, Globals.mc.player.posY, Globals.mc.player.posZ)
        Globals.mc.player.connection.sendPacket(CPacketVehicleMove(riding!!))
    }

    @Listener
    private fun onPacketSent(event: PacketEvent.Send) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (noForceDismount.value) {
            if (event.packet is CPacketPlayer.Position) {
                event.cancel()
                Globals.mc.player.connection.sendPacket(CPacketPlayer.PositionRotation(event.packet.x, event.packet.y, event.packet.z, event.packet.yaw, event.packet.pitch, event.packet.isOnGround))
            }
            if (event.packet is CPacketPlayer && event.packet !is CPacketPlayer.PositionRotation) event.cancel()
        }
    }

    @Listener
    private fun onPacketReceive(event: PacketEvent.Receive) {
        if (event.stage == EventStageable.EventStage.POST) {
            if (event.packet is SPacketSetPassengers) {
                if (riding != null) {
                    if (riding == Globals.mc.world.getEntityByID(event.packet.entityId)) {
                        val setPassengers = Arrays.stream(event.packet.passengerIds).filter { Globals.mc.world.getEntityByID(it) == Globals.mc.player }.findAny()
                        if (!setPassengers.isPresent) {
                            ChatManager.sendDeleteMessage("You've been dismounted.", "dismounted", ChatIDs.ENTITY_DESYNC)
                            toggle()
                        }
                    }
                }
            }
        }

        if (event.packet is SPacketDestroyEntities) {
            for (entityId in event.packet.entityIDs) {
                if (entityId == riding!!.entityId) {
                    ChatManager.sendMessage("Entity is now null.")
                }
            }
        }


      //  if (event.packet is SPacketSpawnMob) {

    //        if (riding != null && riding!!.entityId == event.packet.entityID) {
    //            event.cancel()
        //        ChatManager.sendMessage("It's the don key!")
    //        }

    //    }

    //    if (event.packet is SPacketMoveVehicle) {
            //ChatManager.sendMessage("SPacketMoveVehicle: " + Vec3d(floor(event.packet.x), floor(event.packet.y), floor(event.packet.z)).toString())
    //        event.cancel()
    //    }

        if (event.getPacket() is SPacketDisconnect) {
            toggle()
        }


    }



}