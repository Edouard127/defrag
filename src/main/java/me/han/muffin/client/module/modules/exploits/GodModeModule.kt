package me.han.muffin.client.module.modules.exploits

import me.han.muffin.client.core.Globals
import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.client.TickEvent
import me.han.muffin.client.event.events.client.UpdateEvent
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.module.Module
import me.han.muffin.client.utils.timer.Timer
import me.han.muffin.client.value.EnumValue
import me.han.muffin.client.value.Value
import net.minecraft.client.gui.GuiDownloadTerrain
import net.minecraft.entity.Entity
import net.minecraft.network.play.client.*
import net.minecraft.network.play.server.SPacketPlayerPosLook
import net.minecraft.util.EnumHand
import net.minecraft.util.math.Vec3d
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener

internal object GodModeModule: Module("GodMode", Category.EXPLOITS, "Allow you to godmode and invincible from damage.") {
    private val mode = EnumValue(Mode.Portal, "Mode")
    private val portalMode = EnumValue({ mode.value == Mode.Portal }, PortalMode.Old, "PortalMode")
    private val positionAdjust = Value({ mode.value == Mode.Portal }, true, "PositionAdjust")
    private val footStep = Value({ mode.value == Mode.Riding }, false, "FootStep")

    private var sent: CPacketConfirmTeleport? = null

    private var lastRiding: Entity? = null
    private var packetPos = Vec3d.ZERO
    private var shouldSentPosPacket = false

    init {
        addSettings(mode, portalMode, positionAdjust, footStep)
    }

    private enum class Mode {
        Portal, Riding, Packet
    }

    private enum class PortalMode {
        Old, New
    }

    private val timer = Timer()

    override fun onToggle() {
        packetPos = Vec3d.ZERO
    }

    override fun onEnable() {
        when (mode.value) {
            Mode.Portal -> sent = null
            Mode.Riding -> {
                Globals.mc.player.ridingEntity?.let {
                    lastRiding = it
                    Globals.mc.player.dismountRidingEntity()
                    Globals.mc.world.removeEntity(lastRiding!!)
                    Globals.mc.player.setPosition(Globals.mc.player.position.x.toDouble(), Globals.mc.player.position.y.toDouble() - 1, Globals.mc.player.position.z.toDouble())
                }
            }
        }
    }

    override fun onDisable() {
        when (mode.value) {
            Mode.Portal -> {
                if (portalMode.value == PortalMode.Old) {
                    sent?.let {
                        Globals.mc.player.connection?.sendPacket(it)
                    }
                }
            }
            Mode.Riding -> {
                lastRiding?.let {
                    Globals.mc.player.connection.sendPacket(CPacketUseEntity(it, EnumHand.MAIN_HAND))
                }
            }
        }
    }

    @Listener
    private fun onTicking(event: TickEvent) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (packetPos.x != 0.0 && packetPos.y != 0.0 && packetPos.z != 0.0 && shouldSentPosPacket) {
            Globals.mc.player.setPosition(packetPos.x, packetPos.y, packetPos.z)
            if (timer.passed(2500.0)) {
                shouldSentPosPacket = false
            }
        }

    }

    @Listener
    private fun onPlayerUpdate(event: UpdateEvent) {
        if (event.stage != EventStageable.EventStage.PRE || fullNullCheck()) return

        if (mode.value == Mode.Riding) {
            lastRiding?.let {
                it.posX = Globals.mc.player.posX
                it.posY = Globals.mc.player.posY + if (footStep.value) 0.3f else 0.0f
                it.posZ = Globals.mc.player.posZ

                it.rotationYaw = Globals.mc.player.rotationYaw

                Globals.mc.player.connection.sendPacket(CPacketPlayer.Rotation(Globals.mc.player.rotationYaw, Globals.mc.player.rotationPitch, true))
                Globals.mc.player.connection.sendPacket(CPacketInput(Globals.mc.player.movementInput.moveForward, Globals.mc.player.movementInput.moveStrafe, false, false))
                Globals.mc.player.connection.sendPacket(CPacketVehicleMove(it))
            }
        }

    }

    @Listener
    private fun onPacketSend(event: PacketEvent.Send) {
        if (event.stage != EventStageable.EventStage.PRE) return


        if (mode.value == Mode.Portal && portalMode.value == PortalMode.Old && event.packet is CPacketConfirmTeleport) {
            event.cancel()
            sent = event.packet
            shouldSentPosPacket = true
            timer.reset()
        }

        if (mode.value == Mode.Riding) {
            if (event.packet is CPacketUseEntity) {
                lastRiding?.let {
                    event.packet.getEntityFromWorld(Globals.mc.world)?.let { entity ->
                        it.posX = entity.posX
                        it.posY = entity.posY
                        it.posZ = entity.posZ

                        it.rotationYaw = Globals.mc.player.rotationYaw

                        Globals.mc.player.connection.sendPacket(CPacketPlayer.Rotation(Globals.mc.player.rotationYaw, Globals.mc.player.rotationPitch, true))
                        Globals.mc.player.connection.sendPacket(CPacketInput(Globals.mc.player.movementInput.moveForward, Globals.mc.player.movementInput.moveStrafe, false, false))
                        Globals.mc.player.connection.sendPacket(CPacketVehicleMove(it))
                    }
                }

            }

            if (event.packet is CPacketPlayer.Position || event.packet is CPacketPlayer.PositionRotation) {
                event.cancel()
            }
        }

        if (mode.value == Mode.Packet && event.packet is CPacketPlayer) {
            event.cancel()
        }

    }

    @Listener
    private fun onPacketReceive(event: PacketEvent.Receive) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (mode.value == Mode.Portal && portalMode.value == PortalMode.New && Globals.mc.currentScreen is GuiDownloadTerrain) {
            shouldSentPosPacket = true
            timer.reset()
            Globals.mc.currentScreen = null
        }

        if (mode.value == Mode.Portal && positionAdjust.value && event.packet is SPacketPlayerPosLook) {
            if (!Globals.mc.player.isRiding) {
                packetPos = Vec3d(event.packet.x, event.packet.y, event.packet.z)
                Globals.mc.player.setPosition(event.packet.x, event.packet.y, event.packet.z)
            }
            event.cancel()
        }

    }

}