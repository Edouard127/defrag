package me.han.muffin.client.module.modules.exploits

import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.event.events.render.Render3DEvent
import me.han.muffin.client.module.Module
import me.han.muffin.client.utils.color.ColourUtils
import me.han.muffin.client.utils.extensions.kotlin.synchronized
import me.han.muffin.client.utils.render.RenderUtils
import net.minecraft.network.play.server.SPacketChunkData
import net.minecraft.util.math.AxisAlignedBB
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener

object NewChunksModule: Module("NewChunks", Category.EXPLOITS, "Highlights newly generated chunks") {
    private val chunkDataList = HashSet<Pair<Int, Int>>().synchronized()

    @Listener
    private fun onPacketReceive(event: PacketEvent.Receive) {
        if (event.stage != EventStageable.EventStage.PRE || fullNullCheck()) return

        if (event.packet is SPacketChunkData && !event.packet.isFullChunk) {
            val chunk = event.packet.chunkX to event.packet.chunkZ
            synchronized (chunkDataList) {
                chunkDataList.removeIf { it == chunk }
            }
            chunkDataList.add(chunk)
        }

    }

    @Listener
    private fun onRender3D(event: Render3DEvent) {
        if (fullNullCheck()) return

        synchronized(chunkDataList) {
            chunkDataList.forEach {
                val x = it.first * 16F
                val z = it.second * 16F

                val bb = AxisAlignedBB(
                    x - RenderUtils.viewerPosX, 0 - RenderUtils.viewerPosY, z - RenderUtils.viewerPosZ,
                    x + 16 - RenderUtils.viewerPosX, 1 - RenderUtils.viewerPosY, z + 16 - RenderUtils.viewerPosZ
                )

                RenderUtils.drawBoxOutlineESP(bb, ColourUtils.getClientColour(255), 1.0F)
            }
        }
    }

}