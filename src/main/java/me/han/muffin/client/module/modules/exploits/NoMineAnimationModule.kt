package me.han.muffin.client.module.modules.exploits

import me.han.muffin.client.core.Globals
import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.client.MotionUpdateEvent
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.module.Module
import me.han.muffin.client.utils.extensions.mc.block.collisionBox
import me.han.muffin.client.utils.extensions.mc.block.isNotNull
import me.han.muffin.client.utils.extensions.mc.block.setNull
import net.minecraft.entity.EntityLivingBase
import net.minecraft.entity.item.EntityEnderCrystal
import net.minecraft.network.play.client.CPacketPlayerDigging
import net.minecraft.util.EnumFacing
import net.minecraft.util.math.BlockPos
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener

internal object NoMineAnimationModule: Module("NoMineAnimation", Category.EXPLOITS, "Prevents block break server side animation.") {
    private var isMining = false
    private val lastPos = BlockPos.MutableBlockPos(0, -69, 0)
    private var lastFacing: EnumFacing? = null

    @Listener
    private fun onMotionUpdate(event: MotionUpdateEvent) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (fullNullCheck()) return

        if (!Globals.mc.gameSettings.keyBindAttack.isKeyDown) {
            resetMining()
            return
        }

        if (isMining && lastPos.isNotNull) {
            lastFacing?.let { lastFacing ->
                Globals.mc.player.connection.sendPacket(CPacketPlayerDigging(CPacketPlayerDigging.Action.ABORT_DESTROY_BLOCK, lastPos, lastFacing))
            }
        }

    }

    @Listener
    private fun onPacketSent(event: PacketEvent.Send) {
        if (event.stage != EventStageable.EventStage.PRE || fullNullCheck() || event.packet !is CPacketPlayerDigging) return

        Globals.mc.world.getEntitiesWithinAABBExcludingEntity(null, event.packet.position.collisionBox).forEach {
            if (it is EntityEnderCrystal || it is EntityLivingBase) {
                resetMining()
                return
            }
        }

        if (event.packet.action == CPacketPlayerDigging.Action.START_DESTROY_BLOCK) {
            isMining = true
            lastPos.setPos(event.packet.position)
            lastFacing = event.packet.facing
        }

        if (event.packet.action == CPacketPlayerDigging.Action.STOP_DESTROY_BLOCK) {
            resetMining()
        }

    }


    fun resetMining() {
        isMining = false
        lastPos.setNull()
        lastFacing = null
    }

}