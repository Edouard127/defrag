package me.han.muffin.client.module.modules.exploits

import me.han.muffin.client.core.Globals
import me.han.muffin.client.event.EventStageable
import me.han.muffin.client.event.events.client.TickEvent
import me.han.muffin.client.event.events.network.PacketEvent
import me.han.muffin.client.event.events.network.SendDisconnectPacketEvent
import me.han.muffin.client.manager.managers.ChatManager
import me.han.muffin.client.module.Module
import me.han.muffin.client.value.Value
import net.minecraft.client.gui.GuiMainMenu
import net.minecraft.client.gui.GuiMultiplayer
import net.minecraft.client.multiplayer.WorldClient
import net.minecraft.network.play.server.SPacketChat
import net.minecraft.network.play.server.SPacketDisconnect
import team.stiff.pomelo.impl.annotated.handler.annotation.Listener

internal object QueueSkipperModule: Module("QueueSkipper", Category.EXPLOITS, "Allow you to exploit 2b2t queue.") {
    private val joinBBTT = Value(false, "JoinBBTT")
    private val joinBackCurrent = Value(false, "JoinBackCurrent")

    private val disconnectCurrent = Value(false, "DisconnectCurrent")

    private var BBTTWorld: WorldClient? = null
    private var currentWorld: WorldClient? = null

    init {
        addSettings(joinBBTT, joinBackCurrent, disconnectCurrent)
    }

    override fun onDisable() {
        BBTTWorld = null
        currentWorld = null
    }

    @Listener
    private fun onSendingDisconnectPacket(event: SendDisconnectPacketEvent) {
//        val serverIP = event.server.serverIP
//        if (!serverIP.contains("2b2t.org")) return
//
//        if (BBTTWorld == null) {
//            BBTTWorld = event.world
//            event.cancel()
//        }
    }

    @Listener
    private fun onTicking(event: TickEvent) {
        if (event.stage != EventStageable.EventStage.PRE) return

        if (joinBBTT.value) {

            if (BBTTWorld != null && Globals.mc.world != BBTTWorld) {
                if (disconnectCurrent.value) {
                    currentWorld = Globals.mc.world
                    Globals.mc.loadWorld(null)
                    Globals.mc.displayGuiScreen(GuiMultiplayer(GuiMainMenu()))
                }

                Globals.mc.loadWorld(BBTTWorld!!)
            } else {
                ChatManager.sendMessage("You must join 2b2t first.")
            }

            joinBBTT.value = false
        }

        if (joinBackCurrent.value) {
            if (currentWorld != null && Globals.mc.world != currentWorld) {
                Globals.mc.loadWorld(null)
                Globals.mc.loadWorld(currentWorld!!)
            } else {
                ChatManager.sendMessage("You must join another server after disconnecting from 2b2t.")
            }
            joinBackCurrent.value = false
        }

    }

    @Listener
    private fun onPacketReceive(event: PacketEvent.Receive) {
        if (event.stage != EventStageable.EventStage.PRE || BBTTWorld == null) return

        if (event.packet is SPacketChat) {
            val textReceived = event.packet.chatComponent.formattedText ?:event.packet.chatComponent.unformattedText
            // if (textReceived.contains("in queue:")) event.cancel()
        } else if (event.packet is SPacketDisconnect) {
            val serverData = Globals.mc.currentServerData ?: return
            if (!serverData.serverIP.contains("2b2t.org")) return

            if (BBTTWorld == null) {
                BBTTWorld = Globals.mc.world
                event.cancel()
            }
        }
    }

}